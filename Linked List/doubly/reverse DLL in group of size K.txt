import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data=data;
        this.next=null;
        this.prev=null;
    }
}
class DLL
{
    public void print(Node head)
    {
        Node curr=head;
        while(curr!=null)
        {
            System.out.print(curr.data+"->");
            curr=curr.next;
        }
        System.out.print("null");
        System.out.println();
    }
    
    public Node reverseInGroup(Node head,int k)
    {
        Node prev=null;
        Node curr=head;
        Node next=null;
        int count=1;
        while(curr!=null && count<=k)
        {
            next=curr.next;
            curr.next=prev;
            curr.prev=next;
            prev=curr;
            curr=next;
            count++;
        }
        
        // if linked list have more nodes after first k-nodes
        if(next!=null)
        {
            head.next=reverseInGroup(next,k);
        }
        return prev;
    }
}

public class Main
{
	public static void main(String[] args)
	{
	    Scanner s=new Scanner(System.in);
	    DLL ll=new DLL();
	    int n=s.nextInt();
	    Node head=new Node(s.nextInt());
	    Node tail=head;
	    while(n!=1)
	    {
	        tail.next=new Node(s.nextInt());
	        tail.next.prev=tail;
	        tail=tail.next;
	        n--;
	    }
	    int k=s.nextInt();
	    ll.print(head);
	    
	    head=ll.reverseInGroup(head,k);
	    ll.print(head);
	}
}
