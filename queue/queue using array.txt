import java.util.*;
class Queue
{
    int front,rear,size,length=0;
    int capacity;
    int arr[];
    
    public Queue(int capacity)
    {
        this.capacity=capacity;
        arr=new int[capacity];
        this.size=0;
        this.front=-1;
        this.rear=-1;
    }
    
    // return the no of elements present in queue
    public int size(Queue q)
    {
        return q.size;
    
    }
    
    // to check whether queue is full or not
    public boolean isFull(Queue q)
    {
        return (q.size==q.capacity);
    }
    
    // to check whether queue is empty or not
    public boolean isEmpty(Queue q)
    {
        return q.size==0;
    }
    
    // inserting an element
    public void enQueue(Queue q,int data)
    {
        if(q.isFull(q))
        {
            System.out.println("overflow");
        }
	
	// if no element is present in queue
        else if(front==-1 && rear==-1)
        {
            rear++;
            front++;
            arr[rear]=data;
        }
	
	// if some elements are present in queue
        else
        {
            rear++;
            arr[rear]=data;
        }
        size++;
    }
    
    // deleting an element
    public void deQueue()
    {
        if(front==-1 && rear==-1)
        {
            System.out.println("underflow");
        }

	// if only 1 element is there in queue
        else if(front==rear)
        {
            System.out.println("Deleted element: "+arr[front]);
            front=rear=-1;
        }

	// if elements are present in queue
        else
        {
            int data=arr[front];
            front++;
            System.out.println("delete element: "+data);
        }
        size--;
    }
    // display queue
    public void display(Queue q)
    {
        if(front==-1 && rear==-1)
        {
            System.out.println("no element in queue");
        }
        else
        {
            for(int i=front;i<=rear;i++)
            {
                System.out.println(arr[i]+"\t");
            }
        }
    }
    
    // finding first element inserted
    public void frontEle(Queue q)
    {
        if(q.isEmpty(q))
        System.out.println("empty queue");
        
        else
        System.out.println(arr[front]);
    }
    // finding element inserted at last
    public void rearEle(Queue q)
    {
        if(q.isEmpty(q))
        System.out.println("empty queue");
        
        else
        System.out.println(arr[rear]);
    }
    
}

public class Main
{
	public static void main(String[] args)
	{
	    Queue q=new Queue(100);
	    q.enQueue(q,10);
	    q.enQueue(q,20);
	    q.enQueue(q,30);
	    q.enQueue(q,40);
	    q.enQueue(q,50);
	    System.out.println("size of queue is: "+q.size(q));
	    System.out.println("is queue empty: "+q.isEmpty(q));
	    System.out.println("elements in queue is: ");
	    q.display(q);
	    
	    q.deQueue();
	    
	}
}
